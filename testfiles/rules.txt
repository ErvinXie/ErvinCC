S':
    translation-unit

translation-unit:
    external-declaration
    translation-unit external-declaration

external-declaration:
    function-definition
    declaration

function-definition:
    declaration-specifiers declarator compound-statement
    declaration-specifiers declarator declaration-list compound-statement

declaration-list:
    declaration
    declaration-list declaration

declaration:
    declaration-specifiers ;
    declaration-specifiers init-declarator-list ;

declaration-specifiers:
    storage-class-specifier
    storage-class-specifier declaration-specifiers
    type-specifier
    type-specifier declaration-specifiers
    type-qualifier
    type-qualifier declaration-specifiers

storage-class-specifier:
    typedef
    extern
    static
    register

type-specifier:
    void
    char
    short
    int
    long
    float
    double
    signed
    unsigned
    struct-or-union-specifier
    enum-specifier
    typedef-name

type-qualifier:
    const
    restrict
    volatile

init-declarator-list:
    init-declarator
    init-declarator-list , init-declarator

init-declarator:
    declarator
    declarator = initializer

struct-or-union-specifier:
    struct-or-union { struct-declaration-list }
    struct-or-union identifier { struct-declaration-list }
    struct-or-union identifier

struct-or-union:
    struct
    union

struct-declaration-list:
    struct-declaration
    struct-declaration-list struct-declaration

struct-declaration:
    specifier-qualifier-list ;
    specifier-qualifier-list struct-declarator-list ;

specifier-qualifier-list:
    type-specifier
    type-specifier specifier-qualifier-list
    type-qualifier
    type-qualifier specifier-qualifier-list

struct-declarator-list:
    struct-declarator
    struct-declarator-list , struct-declarator

struct-declarator:
    declarator
    declarator : constant-expression

enum-specifier:
    enum { enumerator-list }
    enum identifier { enumerator-list }
    enum { enumerator-list , }
    enum identifier { enumerator-list , }
    enum identifier

enumerator-list:
    enumerator
    enumerator-list , enumerator

enumerator:
    enumeration-constant
    enumeration-constant = constant-expression


declarator:
    direct-declarator
    pointer direct-declarator

direct-declarator:
    identifier
    ( declarator )
    direct-declarator [ ]
    direct-declarator [ constants ]
    direct-declarator ( parameter-type-list )
    direct-declarator ( )
    direct-declarator ( identifier-list )

pointer:
    *
    * type-qualifier-list
    * pointer
    * type-qualifier-list pointer

type-qualifier-list:
    type-qualifier
    type-qualifier-list type-qualifier

parameter-type-list:
    parameter-list
    parameter-list , ...

parameter-list:
    parameter-declaration
    parameter-list , parameter-declaration

parameter-declaration:
    declaration-specifiers declarator

identifier-list:
    identifier
    identifier-list , identifier

type-name:
    specifier-qualifier-list

initializer:
    assignment-expression



statement:
    labeled-statement
    compound-statement
    expression-statement
    selection-statement
    iteration-statement
    jump-statement

labeled-statement:
    identifier : statement
    case constant-expression : statement
    default : statement

compound-statement:
    { }
    { block-item-list }

block-item-list:
    block-item
    block-item-list block-item

block-item:
    declaration
    statement

expression-statement:
    ;
    expression ;

selection-statement:
    if ( expression ) statement
    if ( expression ) statement else statement
    switch ( expression ) statement

iteration-statement:
    while ( expression ) statement
    do statement while ( expression ) ;
    for ( ; ; ) statement
    for ( expression ; ; ) statement
    for ( ; expression ; ) statement
    for ( expression ; expression ; ) statement
    for ( ; ; expression ) statement
    for ( expression ; ; expression ) statement
    for ( ; expression ; expression ) statement
    for ( expression ; expression ; expression ) statement
    for ( declaration ; ) statement
    for ( declaration expression ; ) statement
    for ( declaration ; expression ) statement
    for ( declaration expression ; expression ) statement



jump-statement:
    goto identifier ;
    continue ;
    break ;
    return ;
    return expression ;


primary-expression:
    identifier
    constant
    string-literal
    ( expression )

postfix-expression:
    primary-expression
    postfix-expression [ expression ]
    postfix-expression ( )
    postfix-expression ( argument-expression-list )
    postfix-expression . identifier
    postfix-expression -> identifier
    postfix-expression ++
    postfix-expression --
    ( type-name ) { initializer-list }
    ( type-name ) { initializer-list , }

argument-expression-list:
    assignment-expression
    argument-expression-list , assignment-expression

unary-expression:
    postfix-expression
    ++ unary-expression
    -- unary-expression
    unary-operator cast-expression
    sizeof unary-expression
    sizeof ( type-name )

unary-operator:
    &
    *
    +
    -
    ~
    !

cast-expression:
    unary-expression
    ( type-name ) cast-expression

multiplicative-expression:
    cast-expression
    multiplicative-expression * cast-expression
    multiplicative-expression / cast-expression
    multiplicative-expression % cast-expression

additive-expression:
    multiplicative-expression
    additive-expression + multiplicative-expression
    additive-expression - multiplicative-expression

shift-expression:
    additive-expression
    shift-expression << additive-expression
    shift-expression >> additive-expression

relational-expression:
    shift-expression
    relational-expression < shift-expression
    relational-expression > shift-expression
    relational-expression <= shift-expression
    relational-expression >= shift-expression

equality-expression:
    relational-expression
    equality-expression == relational-expression
    equality-expression != relational-expression

AND-expression:
    equality-expression
    AND-expression & equality-expression

exclusive-OR-expression:
    AND-expression
    exclusive-OR-expression ^ AND-expression

inclusive-OR-expression:
    exclusive-OR-expression
    inclusive-OR-expression | exclusive-OR-expression

logical-AND-expression:
    inclusive-OR-expression
    logical-AND-expression && inclusive-OR-expression

logical-OR-expression:
    logical-AND-expression
    logical-OR-expression || logical-AND-expression
    logical-AND-expression
    logical-OR-expression || logical-AND-expression
    logical-AND-expression
    logical-OR-expression || logical-AND-expression

conditional-expression:
    logical-OR-expression
    logical-OR-expression ? expression : conditional-expression

assignment-expression:
    conditional-expression
    unary-expression assignment-operator assignment-expression

assignment-operator:
    =
    *=
    /=
    %=
    +=
    -=
    <<=
    >>=
    &=
    ^=
    |=

expression:
    assignment-expression
    expression , assignment-expression

constant-expression:
    conditional-expression